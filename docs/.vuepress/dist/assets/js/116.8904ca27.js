(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{634:function(s,t,n){"use strict";n.r(t);var a=n(38),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"docker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[s._v("#")]),s._v(" docker")]),s._v(" "),n("h2",{attrs:{id:"在ubuntu中安装docker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在ubuntu中安装docker"}},[s._v("#")]),s._v(" 在ubuntu中安装docker")]),s._v(" "),n("ol",[n("li",[s._v("使用 Shell 脚本进行安装(新机)\n参考 ： https://www.runoob.com/docker/ubuntu-docker-install.html")])]),s._v(" "),n("p",[n("code",[s._v("curl -fsSL https://get.docker.com -o get-docker.sh")]),s._v(" "),n("code",[s._v("sudo sh get-docker.sh")])]),s._v(" "),n("h2",{attrs:{id:"可能遇到的问题-debconf-delaying-package-configuration-since-apt-utils-is-not-installed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可能遇到的问题-debconf-delaying-package-configuration-since-apt-utils-is-not-installed"}},[s._v("#")]),s._v(" 可能遇到的问题 ： debconf: delaying package configuration, since apt-utils is not installed")]),s._v(" "),n("p",[s._v("解决 ：\n"),n("code",[s._v("DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends apt-utils")]),s._v(" "),n("code",[s._v("apt-get update && apt-get install --assume-yes apt-utils")])]),s._v(" "),n("p",[s._v("未解决")]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("手动安装\n待完善")])]),s._v(" "),n("h2",{attrs:{id:"要停止所有的docker镜像-可以使用以下命令-docker-stop-docker-ps-aq"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#要停止所有的docker镜像-可以使用以下命令-docker-stop-docker-ps-aq"}},[s._v("#")]),s._v(" 要停止所有的Docker镜像，可以使用以下命令 docker stop $(docker ps -aq)")]),s._v(" "),n("h2",{attrs:{id:"删除所有容器-docker-rm-docker-ps-aq"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#删除所有容器-docker-rm-docker-ps-aq"}},[s._v("#")]),s._v(" 删除所有容器 docker rm $(docker ps -aq)")]),s._v(" "),n("h2",{attrs:{id:"可以使用以下命令来删除所有镜像-docker-rmi-docker-images-q"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可以使用以下命令来删除所有镜像-docker-rmi-docker-images-q"}},[s._v("#")]),s._v(" 可以使用以下命令来删除所有镜像 docker rmi $(docker images -q)")]),s._v(" "),n("h2",{attrs:{id:"_1-docker-获取镜像-image-的两种方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker-获取镜像-image-的两种方式"}},[s._v("#")]),s._v(" 1. docker 获取镜像 image 的两种方式")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". registry   ps:（换源）\n\n "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("tee")]),s._v(" /etc/docker/daemon.json   \n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"registry-mirrors"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://yxzrazem.mirror.aliyuncs.com"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n 复制黏贴如下  然后回车换行  再输入 :wq   ctrl+C 退出  \n\n\n")])])]),n("h2",{attrs:{id:"打包自己的docekr包-上传"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#打包自己的docekr包-上传"}},[s._v("#")]),s._v(" 打包自己的docekr包 上传")]),s._v(" "),n("ol",[n("li",[s._v("登陆docker")])]),s._v(" "),n("p",[s._v("docker login -u <你的docker用户名>.  #你登录docker的用户名 然后在命令行中输入密码")]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("给你的镜像起一个别名字")])]),s._v(" "),n("p",[n("code",[s._v("docker tag <你的项目名> <你的docker用户名>/<你的项目的名字>")])]),s._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[s._v("push镜像")])]),s._v(" "),n("p",[n("code",[s._v("docker push <你的docker用户名>/<你的项目的名字>")]),s._v("\n示例：")]),s._v(" "),n("p",[n("code",[s._v("docker push applestven/nginx-vite")])]),s._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[s._v('docker build .\n打包Dockerfile 文件 注意 " . 代表当前文件夹Dockerfile文件"')])]),s._v(" "),n("p",[s._v("示例：# -t是起一个别名的意思，这里的意思是在当前目录进行build（注意后面还有个“.”）打包后的镜像名字是"),n("code",[s._v("applestven/nginx-vite")]),s._v(" "),n("code",[s._v("docker build -t applestven/nginx-vite .")])]),s._v(" "),n("p",[s._v("docker image ls  #查看本地所有镜像")]),s._v(" "),n("ol",{attrs:{start:"5"}},[n("li",[s._v("本地启动自己打包的镜像")])]),s._v(" "),n("p",[n("code",[s._v("docker run -dp 3090:80 applestven/nginx-vite")])]),s._v(" "),n("p",[s._v("Dockefile 示例 ：")]),s._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FROM")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("nginx")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("latest                            \n"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("COPY")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("dist "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("usr"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("share"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("nginx"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("html  \n"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("EXPOSE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n")])])]),n("p",[s._v("总结上传docker")]),s._v(" "),n("ol",[n("li",[s._v("登陆dockehub")]),s._v(" "),n("li",[s._v("创建Dockerfile")]),s._v(" "),n("li",[s._v("docker build -t  [用户名/项目名]")]),s._v(" "),n("li",[s._v("docker push [用户名/项目名]")]),s._v(" "),n("li",[s._v("运行上传的镜像 ： docker run -it applestven/nginx-vite")])]),s._v(" "),n("h2",{attrs:{id:"开机报错"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开机报错"}},[s._v("#")]),s._v(" 开机报错")]),s._v(" "),n("p",[s._v("Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?")]),s._v(" "),n("p",[s._v("解决方法\nservice docker restart")]),s._v(" "),n("h2",{attrs:{id:"查询docker-部署地址-以及其他详细信息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查询docker-部署地址-以及其他详细信息"}},[s._v("#")]),s._v(" 查询docker 部署地址  以及其他详细信息")]),s._v(" "),n("p",[s._v("docker inspect [container ID]")]),s._v(" "),n("h2",{attrs:{id:"_2-docker-常用命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-docker-常用命令"}},[s._v("#")]),s._v(" 2.docker 常用命令")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("history")]),s._v(" 13b66b487594"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" IMAGE ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 查看镜像历史丛操作\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". 查看所有容器（包括退出的） "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" container "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -a\n查看正在运行的容器 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" container "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(". 进入container容器    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -it ubuntu\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" container stop 3f55ff4befe1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("CONTAINER ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 停止容器\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" comtainer "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v("  82c24063e6e1 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("id 可以不写全 ，82也可"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 删除容器\n简便写法以及扩展\n "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" comtainer "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("82")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("82")]),s._v(" （默认删除容器）\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -f "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("82")]),s._v(" （强制删除容器）  \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" rmi "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),s._v("（删除镜像）\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" container "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -aq（打印所有容器id）\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" container "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -aq"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" （删除所有的容器）\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" container "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -f "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"status=exited"')]),s._v(" （列出已经退出的容器）\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" container "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -f "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"status=exited"')]),s._v(" -q （列出已经退出的ID）  \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" container "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -f "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"status=exited"')]),s._v(" -q "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" （删除已经推退出的容器）\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(". 构建一个自己的容器\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.1")]),s._v("  基于一个以及存在的container 创建image\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" commit wizardly_swirles"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("NAMES"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  wizardly_swirles/applestven\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" commit 容器名  重新命名 \n此时就构建了自己的镜像 \n但是这种创建镜像（docker image）并不推荐 ，因为别人拿到我们的镜像 image ，不知道怎么产生的 ，也可能有不安全的东西放入这里面 ，然后发布出去 \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.2")]),s._v("  dockerfile 通过docker build 创建image镜像 \n- "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" docker-centos-vim "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("创建文件夹"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v("  docker-centos-vim\n- "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" Dockerfile （创建/编辑文件Dockerfile）\n\nFROM centos\nRUN "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /etc/yum.repos.d/\nRUN "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" -i "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/mirrorlist/#mirrorlist/g'")]),s._v(" /etc/yum.repos.d/CentOS-*"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" -i "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g'")]),s._v(" /etc/yum.re\npos.d/CentOS-*\nRUN yum makecache\nRUN yum update -y\nRUN yum -y "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v("\n\n- "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build -t  applestven/centos-vim-new "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("注意 “.” 为执行Dockerfile"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(".Dockerfile 语法梳理及实践\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.1")]),s._v(" 制作base image  \n\n  FROM centos \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.2")]),s._v(" Metadata信息    不可少！ （类似注释）\n  LABEL "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("maintainer")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("“applestven@gmail.com” \n  LABEL version "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.0"')]),s._v(" \n  LABEL description "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"THis is description"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.3")]),s._v(" RUN 运行\n  RUN yum update "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" yum "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\npython-dev "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#反斜杠换行")]),s._v("\n  RUN "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" update "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y perl "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\npwgen --no-install-recommends "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v(" \n/var/lib/apt/lists/*  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#注意清理cache")]),s._v("\n  RUN /bin/bash -c"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'source $HOME/.bashrc;echo$HOME'")]),s._v("\n注意 ： 为了美观 ，复杂的RUN 请用反斜线换行 ！ \n避免无用分层 ，合并多条命令成一行\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.4")]),s._v(" WORKDIR /root  当前工作目录 \n  WORKDIR  /root\n  WORKDOR /test  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#如果没有会自动创建test目录")]),s._v("\n  WORKDIR demo \n  RUN "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),s._v("  ​          "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出结果应该是 /text/demo")]),s._v("\n​注意 ： 用WORKDIR ，不要使用RUN "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" 尽量使用绝对目录\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.5")]),s._v(" ADD and COPY \n\nADD hello /   "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加hello 到根目录")]),s._v("\nADD test.tar.gz / "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加到根目录并解压 ")]),s._v("\n\nWORKDIR /root  \nADD hello test/    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 此时  #/root/test/hello")]),s._v("\n\nWORKDIR /root\nCOPY hello test/\n\n注意 ： 大部分情况 ，COPY 优于 ADD ！ \nADD 除了COPY 还有额外功能 （解压 ）！\n添加远程文件/目录请使用curl或者 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" ！ \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.6")]),s._v(" ENV  环境\nENV MYSQL_VERSION "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.6")]),s._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置常量 ")]),s._v("\nRUN "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y mysql-server "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'${MYSQL_VERSION}'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf /var/lib/apt/list/*  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 引用常量 ")]),s._v("\n\n注意 ： 尽量使用ENV增加可维护性！\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.7")]),s._v(" VOLUME and EXPOSE  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("存储和网络 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.8")]),s._v(" CMD and ENTRYPOINT    \nRUN vs CMD vs ENTRYPOINT  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" entrypoint "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  RUN :执行命令并创建 新的Image Layer \n  CMD "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" 设置容器启动后默认执行的命令和参数 （多条只执行最后一条 ，多条会被覆盖）\n   ENTRYPOINT ： 设置容器启动时运行的命令   （一定会执行）  \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 镜像的发布 ")]),s._v("\n​``` "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##  docker push ")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" push "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTIONS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" NAME"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":TAG"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" push applestven/centos-vim-new:latest\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##  与github建立联系 便于查看Dockerfile  create Automated Build  ")]),s._v("\n dockerhub 收费才能链接GitHub构建了 （弃）\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##  创建私有registry    创建一个私人 或团队私有的dockerHub ")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".在dockerHub上搜索 registry   翻 文档 找到    \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".在目标服务器上使用 创建私有registry   实际container ：   \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d -p "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v(":5000 --restart always --name registry registry:2\n可能会很慢 ，或者拉取registry不成功  ， 可以换源 加代理 可快速解决这个问题\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(". 在“客户端 ” telent "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.188 :5000 测试端口是否开放使用 \n（nas上开放端口有问题放弃）\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(". 使用Dockerfile  重新build"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("先删除先前使用同一Dockerfile创建的image"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ： \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build -t "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.188:5000/centos-vim "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(". 使用docker push  "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.188:5000/centos-vim  \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.1")]),s._v("  直接push 会报错   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.188:5000地址不安全 ，需要修改\n修改/添加    \n在 /etc/docker/daemon.json 中 ，\n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"insecure-registries"')]),s._v(":"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"192.168.0.188:5000"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("   \n \n在 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" /lib/systemd/system/docker.service\n加一行 ： （在ExecStart"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/bin/dockerd下）\n"),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("EnvironmentFile")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("-/etc/docker/daemon.json "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("加载会读取这个文件"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n最后，\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" restart \n\n 重启push  就会push到我们的私有dockerHub里面   \n\n没有web界面  ，如果需要验证是否搭建成功访问 "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\n\n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.188:5000/v2/_catalog  \n \n")])])]),n("h2",{attrs:{id:"_3-dockerfile-实战"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-dockerfile-实战"}},[s._v("#")]),s._v(" 3.dockerfile 实战")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## DockerFile ")]),s._v("\nFROM python:2.7\nLABEL "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("maintainer")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"stven Wen<applestven@gmail.com>"')]),s._v("\nRUN pip "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" flask\nCOPY app.py /app/\nWORKDIR /app\nEXPOSE "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v("\nCMD "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"python"')]),s._v(" , "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"app.py"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## app.py")]),s._v("\nfrom flask "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("import")]),s._v(" Flask\napp "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Flask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__name__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n@app.route"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ndef hello"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello docker"')]),s._v("\nif__name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'__main__'")]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\napp.run"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),n("p",[s._v("总结 ： 如何调试Dockerfile   ？   docker build  运行会一层一层执行 ，可以看到在哪一层执行错误 ， 并且每一层都会生成临时镜像 ，可在出错误的前一层   执行镜像 ，进入容器中调试下一层命令 。")]),s._v(" "),n("h2",{attrs:{id:"_4-container-容器的操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-container-容器的操作"}},[s._v("#")]),s._v(" 4.container 容器的操作")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("先运行一个容器   * -it  交互式运行  \n\n "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("容器id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  /bin/bash 或者/bin/sh 进入容器根目录  \n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("容器id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  python   进入运行容器，执行python \n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("容器id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a  打印运行容器ip地址 \n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d --name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("demo "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("镜像名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  给容器取一个名字为demo\n（未注定名字就随机取）\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" stop demo 停止demo 容器\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" start demo 启动demo 容器 \n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" inspect "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("容器id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  显示容器详细 ，主要内容包括 ： \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".容器完整id  ：ID\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". 创建时间  ： Created\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(". 参数 ： Args \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(". 状态 ： State\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(". 镜像: Image\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(". host配置 ： HostConfig\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(". Config配置 ：Config   em:  Hostname \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(".环境变量 ： ENV  \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(".Cmd ： em:"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"python"')]),s._v(","),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"app.py"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(". 网络方面 ： NetworkSettings \nem：Networks ， Gateway:172.17.0.1 ，IPAddress:172.17.0.2 ,MacAddress\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("容器id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  ： 运行信息  可做调试用\n")])])]),n("h2",{attrs:{id:"_5-网络基础回顾"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-网络基础回顾"}},[s._v("#")]),s._v(" 5.网络基础回顾")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" 和 telnet  \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" 验证ip可达性 \ntelnet  验证服务可用性\nem ： \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" www.imooc.com\ntelnet www.imooc.com "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n能ping通  telent 不能  ，考虑防火墙\n\n抓包工具 ： wireshark\n")])])]),n("h2",{attrs:{id:"_6-linux-网络命名空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-linux-网络命名空间"}},[s._v("#")]),s._v(" 6.Linux 网络命名空间")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("容器id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a  查看容器网络\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns list 查看本机网络命名空间（ network linux space ）\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns delete test1  删除\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" test1  创建/添加\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test1 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a ,在test1的  linux   network Namespace中 运行ip a ，查询网络信息 \n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" 查看本机网络信息 （本地回环口， 端口） \n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test1 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" dev lo up   在test1的network linux space中 运行 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" dev lo up ，启动端口   \n")])])]),n("h2",{attrs:{id:"_7-连接两个network-namespace-使得能够ping通"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-连接两个network-namespace-使得能够ping通"}},[s._v("#")]),s._v(" 7. 连接两个network namespace 使得能够ping通")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("过程 ： 创建一对（可连通）端口' veth-test1 ， veth-test2‘  并将这两个端口添加到容器test1 test2中    ping通 \n \n添加一对link ： "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" veth-test1 "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" veth peer name veth-test2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("可连接通"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" 查询到这一对link \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" veth-test1 netns test1\n    - "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test1 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a  查看test1容器网络是否有端口： veth-test1 ， \n    - "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" 查看本地网络发现本地端口   veth-test1 不见了 被添加到容器test1 里面 \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" veth-test2 netns test2  \n    -   "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" 查看本地网络发现本地端口   veth-test2 不见了 被添加到容器test2 里面 \n\n    - "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test2 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v("  发现test2里面也多了一个端口  veth-test2\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(". 给两个端口分配ip地址\n"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('" veth-test1 ， veth-test2 "')]),s._v(" 只有物理地址  ，且都是down（未执行未打开）的 \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test1 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" addr "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.1/24 dev veth-test1 \n在test1 linux network namespace里面执行 给  dev veth-test1端口\n分配一个ip地址是 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.1  ， 掩码是24\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test2 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" addr "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.2/24 dev veth-test2\n\n执行完后 ，查询  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test2 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" 还是只有物理地址\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(".  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test1 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" dev veth-test1 up  将test1的linux network namespace 的端口veth-test1 给up启动起来 \n同样 ， 再把 test2的 veth-test1端口 给up启动起来 \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(". 查询test1 test2 的linux network space ，分配的端口是否启动\n "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test1 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a  \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(". 查询是否能ping通 \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" netns "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" test1 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.2 \n\n完结撒花 。。。。 。。。。。。\n")])])]),n("h2",{attrs:{id:"_8-docker-bridge-详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-docker-bridge-详解"}},[s._v("#")]),s._v(" 8. Docker bridge 详解")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("前提 ： 已经创建有test1容器 且容器绑定有自建端口（network namespace） 以做下面查询\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##  列举docker有哪些网络 sudo docker network ls ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network inspect "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("network ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 查看网络详情\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##  如何去查看 veth端口（容器端口） 连接到 docker0上 ")]),s._v("\n\ncentos 安装 工具 ： "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" bridge-utils\nubuntu 安装工具  ： "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" agt-get "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" bridge-utils\n\nbrctl show 查看机器上的linux bridge  连接 （interfaces）\n （em:docker0  可以看到接口interfaces  ： veth26d281c）\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a  查看到最后一个端口为"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("em "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" veth26d281c@xxx  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  表示我们的接口连接到了 docker0 \n")])])]),n("h2",{attrs:{id:"_9-容器端口的映射-nginx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-容器端口的映射-nginx"}},[s._v("#")]),s._v(" 9.容器端口的映射 （nginx）")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". run 一个持久化运行的nginx （取名为web）\n "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run --name web -d nginx "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("-d 持久化运行"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". 进入nginx里面 \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it web /bin/bash （-it交互式运行） \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(". 查询网络（nginx默认连接到docker0 bridge）\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network inspect bridge  查询到ipv4地址：em：172.17.0.2/16\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(".在nginx容器外ping  "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2 是可以ping通的 \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a 可以看到容器外面有docker0 bridge\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(". telnet "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" 测试80端口是否可以访问 \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(". 可以通过curl "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2访问网站 ，测试能否访问nginx页面  由此 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" host里面是可以访问nginx的80服务的 \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 上面是推演学习过程（1-6） 下面是直接步骤（7-）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(". 把nginx "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("端口映射到本地 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" （- p  ）\n删除前面容器（docker "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" web） 重新创建容器 ： \n- "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run --name web -d -p "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 nginx   （-p "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 把80端口映射到本地   ，第一个80是本地 ，第二个80是内部bridge）\n- "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" 查询到nginx 的ports 为 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:80-"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("/tcp   已经连接到本地\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1  查询是否能访问到container容器里面的nginx服务\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a 查询到ens33本地虚拟化 地址 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".31.129 \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(". vmware 虚拟网络编辑-NAT设置 将虚拟地址 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".31.129  映射到 本地端口 xxxx \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:xxxx 如果要再做局域网（nas/路由器）访问 ， 需要再做端口映射 把虚拟地址映射到本地地址 \n以windows为例 ，需要在防火墙中添加入站规则   将xxxx映射出去\n\n")])])]),n("h2",{attrs:{id:"_10-容器网络之host与none"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-容器网络之host与none"}},[s._v("#")]),s._v(" 10.容器网络之host与none")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("  查询到网络 bridge 和 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" 以及 none 三个网络 \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d --name test1 --network none busybox /bin/sh -c "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"while true; do sleep 3600 ;done"')]),s._v(" 创建容器test1 用--network 指定网络 none ,一般来说指定为none的使用场景只有是只供内网访问的应用 \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network inspect none 查询none网络 发现test1绑定 \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it test1 /bin/sh   //   "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a 进入  查询到none的网络只有本地回环口lo\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d --name test1 --network "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" busybox /bin/sh -c "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"while true; do sleep 3600 ;done"')]),s._v(" 创建容器test1 用--network 指定网络 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" , 进入容器 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ip")]),s._v(" a再查网络  本地网络回环口 ，内网网络回环口就都在了 跟linux主机是一样的\n")])])]),n("h2",{attrs:{id:"_11-多容器的复杂应用部署-空"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-多容器的复杂应用部署-空"}},[s._v("#")]),s._v(" 11.多容器的复杂应用部署 (空)")]),s._v(" "),n("h2",{attrs:{id:"_12-underlay和overlay"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-underlay和overlay"}},[s._v("#")]),s._v(" 12.underlay和overlay")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". underlay: 现实的物理基础层网络设备。-数据中心基础转发架构的网络。\n    - 以太网最初设计的时候就是一个分布式的网络架构，没有中心控制节点，网络中的节点通过协议传递学习网络的可达性信息。underlay就是数据中心场景的基础物理设施，保证任何两个点路由可达，其中包含了传统的网络技术。\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". overlay：一个基于物理网络之上构建的逻辑网络。\n    - overlay是在网络技术领域指的是一种网络架构上叠加的虚拟化技术模式，Overlay网络也是一个网络，不过是建立在Underlay网络之上的网络。overlay网络节点通过虚拟或者逻辑链路进行通信，其实现基于ip技术的基础网络为主。Overlay网络技术多种多样，一般采用TRILL、VxLan、GRE、NVGRE等隧道技术。\n    更多连接 ： https://blog.csdn.net/xinquanv1/article/details/102509858/    \n")])])]),n("h2",{attrs:{id:"_13-docker-overlay-网络-和etcd实现多容器通信-空"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-docker-overlay-网络-和etcd实现多容器通信-空"}},[s._v("#")]),s._v(" 13.Docker Overlay 网络 和etcd实现多容器通信(空)")]),s._v(" "),n("h2",{attrs:{id:"_14-部署一个wordpress"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-部署一个wordpress"}},[s._v("#")]),s._v(" 14.部署一个wordPress")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 创建数据库  -v volume  持续化存储  ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d --name mysql -v mysql-data:/var/lib/mysql -e "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ROOT_PASSWORD")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("779604436")]),s._v(" -e "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_DATABASE")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("wordpress mysql\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 创建wordpress容器 ， --link 创建内网桥连接 到容器mysql -p 将内网80端口 映射到虚拟机本地8080端口")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d -e "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("WORDPRESS_DB_HOST")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mysql:3306 -e "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("WORDPRESS_DB_USER")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("root -e "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("WORDPRESS_DB_PASSWORD")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("779604436")]),s._v("  --link mysql -p "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8877")]),s._v(":80 wordpress\n\n")])])]),n("h2",{attrs:{id:"_15-docker-的持久化存储-和数据共享"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-docker-的持久化存储-和数据共享"}},[s._v("#")]),s._v(" 15.Docker 的持久化存储 和数据共享")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("Docker持久化数据的方案 \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". 基于本地系统的Volume 。\n可以在执行Docker create 和 Docker run时 ,通过 -v参数将主机的目录作为容器的数据卷 ，这部分功能便是基于本地系统文件系统的volume管理\n- 基于 plugin 的volume ，支持第三方的存储方案，比如NAS ，aws \n\n- Volume 的类型 \n    + 受管理的data volume ，由docker后台自动创建\n    + 绑定挂载的volume ，具体挂载位置可以由用户指定 \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". Bind Mouting \n")])])]),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### Data Volume 数据卷 ")]),s._v("\n（删除容器，不删除镜像 ，可找通过数据卷找回数据 ，如数据库数据）\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD mysql \n\n“数据库未初始化，密码没设置。你需要设置MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD三个中的任意一项”\n\n其中 MYSQL_ROOT_PASSWORD即root账户的密码。\n\nMYSQL_ALLOW_EMPTY_PASSWORD即允许密码为空。\n\nMYSQL_RANDOM_ROOT_PASSWORD随机一个root账户密码。\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". volume mysql的运用 \nmysql没有运行起来  查询 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs mysql\n删除镜像    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" mysql \n查询volume  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" volume "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" \n删除volume  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" volume "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("volume id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n重新执行将mysql执行起来： "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d --name mysql2 -e "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ALLOW_EMPTY_PASSWORD")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true mysql\n查询 volume 详情 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" volume inspect "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("volume id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  可以查询到volume的存储地址 \n总结以上 ： volume "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" 太长且无意义 无法分辨 删除以上 \n\n对volume -v进行命名 mysql 以及设置存储位置:/var/lib/mysql\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d -v mysql:/var/lib/mysql --name mysql -e "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ALLOW_EMPTY_PASSWORD")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true mysql\n\n进入mysql中 ：\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it 2d0656c1669c /bin/bash\n\nmysql -u root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \nshow databases"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n创建数据表 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v("\ncreate database "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" \n强制删除容器 \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -f  2d0656c1669c\n\n使用volume 创建新的mysql容器\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d -v mysql:/var/lib/mysql --name mysqlre -e "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ALLOW_EMPTY_PASSWORD")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true mysql\n\n查询数据库 docker表依在 由此 删除容器 但不影响volume\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 数据持久化 ： Bind Mouting ")]),s._v("\n \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -v /home/aaa:/root/aaa  本地目录 映射 目录\n\n将本地目录 "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" 映射到 /usr/share/nginx/html\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d -v "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(":/usr/share/nginx/html -p "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 --name web xxx \n")])])]),n("h2",{attrs:{id:"_16-docker-compose"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-docker-compose"}},[s._v("#")]),s._v(" 16.docker-compose")]),s._v(" "),n("p",[s._v("定义： Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" 解决什么问题   \n - 要从Dockerfile build image 或者 dockerhub 拉去image 太恶心 \n - 要创建多个container \n - 要管理这些container（启动停止删除）\n + 总结 ： 多个容器部署问题  \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" 是什么\n    - Docker Compose 是一个工具 \n    - 这个工具可以通过一个yml文件定义多容器的docker应用 \n    - 通过一条命令就可以根据yml文件的定义去创建或者管理这多个容器\n    + 总结 ： "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v("  “一个批处理工具”  一个docker up 命令管理 多个container\n\n")])])]),n("h3",{attrs:{id:"docker-compose-yml-是compose默认名字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml-是compose默认名字"}},[s._v("#")]),s._v(" docker-compose.yml 是compose默认名字")]),s._v(" "),n("h2",{attrs:{id:"docker-compose三大概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose三大概念"}},[s._v("#")]),s._v(" docker compose三大概念 ：")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". services "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" \n    - 一个service代表一个container ，这个container可以从dockerhub的image来创建 ，或者从本地的Dockerfile build出来的image来创建\n    - Service的启动类似docker run ，我们可以给其指定network 和volume ，所以可以给service指定network和volume的引用\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". Networks ：\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(". Volumes\n")])])]),n("h2",{attrs:{id:"docker-compose的安装-使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose的安装-使用"}},[s._v("#")]),s._v(" docker-compose的安装 使用")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". dockerHub的 compose地址 ： \n  https://github.com/docker/compose/releases \n\n  https://github.com/docker/compose/releases/download/1.18.0/docker-compose\n\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". 下载compose 到/usr/local/bin/docker-compose\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -L  https://github.com/docker/compose/releases/download/1.18.0/docker-compose-"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -s"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("-"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -m"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" -o /usr/local/bin/docker-compose\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(". 修改权限\n "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x /usr/local/bin/docker-compose \n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("-- "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("777")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" --"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(". 启动yml文件      \n- "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" up "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("默认文件docker-compose.yml"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n- "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" -f docker-compose.yml up "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("-f 指定执行的文件夹yml文件 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n- 部分常用命令 \n  + "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" up 启动  -d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("后台启动 不打印log"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  + "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" stop 停止服务\n  + "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" start 开启服务\n  + "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" down 删除容器\n  + "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" images 列举docker-compose的image \n  + "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" 列举docker-compose的container \n  + "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" mysql "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("  进入service容器\n    - "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" wordpress "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" 查看docker-compose创建的网络  \n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" mysql "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" 进入mysql的bash\n")])])]),n("h2",{attrs:{id:"docker-compose部署wordpress"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose部署wordpress"}},[s._v("#")]),s._v(" docker-compose部署wordpress")]),s._v(" "),n("ol",[n("li",[s._v("docker-compose.yml")])]),s._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("version")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3'")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("services")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("wordpress")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("image")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" wordpress\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("ports")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("environment")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WORDPRESS_DB_HOST")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" mysql\n        "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WORDPRESS_DB_PASSWORD")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("779604436")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("networks")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" my"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("bridge\n\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("mysql")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("image")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" mysql\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("environment")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WORDPRESS_DB_USE")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" root\n      "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WORDPRESS_DB_PASSWORD")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("779604436")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MYSQL_DATABASE")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" wordpress\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("volumes")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" mysql"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("data"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("mysql\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("networks")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" my"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("bridge\n\n"),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("volumes")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n  mysql"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("data"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("networks")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n  my"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("bridge"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("driver")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" bridge  \n\n")])])]),n("h2",{attrs:{id:"docker-compose-以dockerfile-build为service"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-以dockerfile-build为service"}},[s._v("#")]),s._v(" docker-compose 以DockerFile build为service")]),s._v(" "),n("ol",[n("li",[s._v("docker-compose.yml")])]),s._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("version")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("services")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("redis")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("image")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" redis\n  \n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("web")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("build")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("context")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("dockerfile")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Dockerfile\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("ports")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("environment")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" \n      "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REDIS_HOST")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" redis \n")])])]),n("h2",{attrs:{id:"_17-水平扩展和负载均衡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-水平扩展和负载均衡"}},[s._v("#")]),s._v(" 17.水平扩展和负载均衡")]),s._v(" "),n("ol",[n("li",[n("ul",[n("li",[s._v("docker-compose up -d 后台运行")]),s._v(" "),n("li",[s._v("docker-compose ps")]),s._v(" "),n("li",[s._v("docker-compose up --scale web=3 将web容器启动三个\ndocker-compose文件参考 ：")])]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("\n  version: "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v("\n\n  services:\n\n    redis:\n      image: redis\n\n    web:\n      build:\n        context: "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n        dockerfile: Dockerfile\n      ports:\n        - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":5000\n      environment:\n        REDIS_HOST: redis   \n")])])])]),s._v(" "),n("li",[n("p",[s._v("docker-compose up --scale web=10 需要注意posts端口占用 可以删除ports项")])])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("负载均衡 ：  haproxy -- 10web -- redis")])]),s._v(" "),n("li",[n("p",[s._v("负载均衡的写法lb")])])]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("  version: "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v("\n\n  services:\n\n    redis:\n      image: redis\n\n    web:\n      build:\n        context: "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n        dockerfile: Dockerfile\n      environment:\n        REDIS_HOST: redis\n    lb:\n      image: dockercloud/haproxy \n      links: \n        - web\n      ports:\n        - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":80\n      volumes:\n        - /var/run/docker.sock:/var/run/docker.sock\n")])])]),n("h2",{attrs:{id:"_18-swarm集群"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-swarm集群"}},[s._v("#")]),s._v(" 18.swarm集群")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("  创建一个三节点的swarm集群 \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". 初始化swarm manager节点为 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".31.132\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" swarm init --advertise-addr"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".31.132 \n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". 在其他docker mechine 中添加 worker 角色 （需要几个worker 就加几次） \n "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" swarm "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("join")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --token SWMTKN-1-5cu6khq67uei50zki7wyvvgadr398rjb19aiwl688irex8ekrm-9meb9up8wvs8jo2d3dbubshju "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".31.132:2377\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(". 查看节点（manager  worker）\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("node")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n")])])]),n("h2",{attrs:{id:"swarm-service的创建和水平扩展维护"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#swarm-service的创建和水平扩展维护"}},[s._v("#")]),s._v(" Swarm  service的创建和水平扩展维护")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v(" 在manager中创建service 类似（docker run）\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" create --name demo busybox "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" -c "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"while true;do sleep 3600;done"')]),s._v("\n- 查询 ： "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("  \n  + MODE:replicated "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" REPLICAS:1/1  表示支持水平扩展scale  目前运行的服务有1个/ 总共服务有1个\n  + 水平扩展 ： "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" serivce scale "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("demo")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" \n    水平扩展后查询docker "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" demo 可看到service水平扩展的5个demo服务分布在不同的worker中 \n  + 在某个workr中 删除其中某个正在服务容器（demo） "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -f "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("容器id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("   \n    重新查询   "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("  发现 REPLICAS:4/5 ,过一会再次查询 发现 REPLICAS:5/5\n    总结 ：也就是sacle不仅能保持横向扩展 ，更能保证我们扩展的容器（服务）是有效的 ，发现错误会去我们的worker节点重启一个demo服务\n\n  + 删除水平扩展的五个demo服务 ，在manager中 ：  \n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" demo \n    过一会再到worker中查询 ：docker "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" \n")])])]),n("h2",{attrs:{id:"在swarm集群里通过service部署wordpress"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在swarm集群里通过service部署wordpress"}},[s._v("#")]),s._v(" 在swarm集群里通过service部署wordpress")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("  通过swarm 创建service  mysql 和wordpress  很可能不在一个worker中  这时候用overlay网络去解决通信问题  \n  ps： swarm为了保持通信： overlay网络demo 会在其他worker中同步创建\n\n  "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". 创建mysql 指定网络demo（overlay）\n  - 创建overlay网络 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network create -d overlay demo \n    + 查询网络 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n  - 在swarm中创建mysql服务 并以demo "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("overlay"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 为指定网络   \n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" create --name mysql --env "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ROOT_PASSWORD")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("root --env "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_DATABASE")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("wordpress --network demo --mount "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("type")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("volume ,source"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mysql-data,destination"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("var/lib/mysql mysql （ps ： --mount 类似于 -v volume "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("destination 指定文件夹地址 ）\n    + "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" 查看起动没有\n\n  "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". 创建wordpress "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" 并指定network \n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" create --name wordpress -p "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 --env "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("WORDPRESS_DB_PASSWORD")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("root --env "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("WORDPRESS_DB_HOST")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mysql --network demo wordpress \n\n  此时去访问worker1  、 workder2 地址（192.168.31.129/192.168.31.131）等都可以访问到我们部署的wordpress  由此引出集群服务间通信的Routing Mesh\n")])])]),n("h2",{attrs:{id:"集群服务间通信的-routing-mesh"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集群服务间通信的-routing-mesh"}},[s._v("#")]),s._v(" 集群服务间通信的 Routing Mesh")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("关键字流程 ： request --》 dns  --》 vip（虚拟ip "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.0")]),s._v(".0.7） --》iptable --》 ipvs（负载均衡） -》service/worker（A.B.C）\n流程 ： \n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". 水平扩展scale "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("demo")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("  ，会有共同的一个虚拟ip （virtual ip） ，访问（ping demo）任意容器的demo服务 ，都会访问一个dns 虚拟ip（em：10.0.0.7）  \n "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("nslookup")]),s._v(" demo 可查询dns  \n     "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("nslookup")]),s._v(" tasks.demo 查询背后容器的真正地址 。。\n\n Routing Mesh的两种体现 \n - Internal -- Container和Container之间的访问听过通过overlay网络（通过VIP虚拟IP）\n - Ingress -- 如果服务有绑定接口 ，则此服务可以通过任意swarm节点的相应接口访问\n\n 查看本地转发规则 "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" \n "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" iptabels -nL -t nat \n\n 查看docker创建的本地网络 ： \n "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" /var/run/docker/nets \n")])])]),n("h2",{attrs:{id:"docker-stack-部署wordpress"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-stack-部署wordpress"}},[s._v("#")]),s._v(" docker stack 部署wordpress")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("-- 文件夹 / --"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n在manager中执行部署stack ：  取名为example ，执行文件为docker.compose.yml\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" stack deploy example --compose-file"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("docker.compose.yml \n\n查询stack \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" stack "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" \n \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" stack "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("stack name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  查看stacak 详情\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" stack services "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("stack name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 查看服务详情 \n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" stack "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("stack name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 删除该stack 的服务与网络 \n\n总结 ： "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" stack 是用来部署swarm集群的 ， 写法与docekr-compose一样 ，只是多一些参数 比如ddeploy 中mode: replicated /global 是否支持水平扩展 ， 配置关闭重启 ， 更新等 以及网络一般为overlay  ， 还有区别于docker-compose的就是image，不能使用Dockerfile再docker build，只能上传dockerhub拉取， \n参考文件 docker-compose.yml \n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("-- /home/applestven/d-compose/swarm-stack --"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])]),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("version: "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3'")]),s._v("\n\nservices:\n\n  wordpress:\n    image: wordpress\n    ports: "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将80 映射到 8000")]),s._v("\n      - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":80\n    environment:\n        WORDPRESS_DB_HOST: mysql:3306\n        WORDPRESS_DB_USER: root\n        WORDPRESS_DB_PASSWORD: "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("779604436")]),s._v("\n    networks:\n      - my-network\n    depends_on: "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行依赖于 mysql  先启mysql ")]),s._v("\n      - mysql\n    deploy:\n      mode: replicated "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#该参数表示可进行水平扩展scale")]),s._v("\n      replicas: "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 水平扩展的格式 ")]),s._v("\n      restart_policy:  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置关闭 如何重启参数")]),s._v("\n        condition: on-failure "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 有失败的重启")]),s._v("\n        delay: 5s\n        max_attempts: "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n      update_config: "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置更新参数")]),s._v("\n        parallelism: "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 更新最多两个")]),s._v("\n        delay: 10s\n\n\n  mysql:\n    image: mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("779604436")]),s._v("\n      MYSQL_DATABASE: wordpress\n    volumes:\n      - mysql-data:/var/lib/mysql\n    networks:\n      - my-network\n    deploy:\n      mode: global  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 该参数表示在manager中部署 且不能进行水平扩展 ")]),s._v("\n      placement:\n            constraints: \n                  - node.role "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" manager\n  visualizer: "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# swarm可视化工具")]),s._v("\n  image: dockersamples/visualizer:stable\n  ports:\n    - "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8080:8080"')]),s._v("\n  stop_grace_period: 1m30s\n  volumes:\n    - "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/var/run/docker.sock:/var/run/docker.sock"')]),s._v("\n  deploy:      \n    placement:\n      constrinsts: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node.role "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" manager"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("    \nvolumes:\n  mysql-data:\n\nnetworks:\n  my-network:\n    driver: overlay\n")])])]),n("h2",{attrs:{id:"_19-docker-secret"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_19-docker-secret"}},[s._v("#")]),s._v(" 19.docker Secret")]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". Secret Management\n - 存在Swarm Manager节点Raft database \n - Secret可以给assign给一个service  ，这个service就能看到secret\n - 在container 内部Secret看起来像文件 ，但实际是在内存中\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". 创建secret 可从文件中创建 也可以输入创建\n - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" secret create "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTIONS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" SECRET "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" pssword  创建 密钥文件 \n    password\n - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),s._v(" 以password文件形式创建secret \n   + "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" secret create my-pw password \n   + "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf password 删除password文件\n - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.4")]),s._v(" 查看密钥列表\n  + "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" secret "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.5")]),s._v(" 删除密钥 \n  + "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" secret "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("secret name:my-pw2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(". 常用操作 \n  - "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" create --name client --secret my-pw busybox "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" -c "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"while true;do sleep 3600; done"')]),s._v("  \n  - "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n  - "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" client \n  - "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" \n  - "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it ccee "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" //\n  - "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /run/secrets/    查看密码 "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("  \n  - "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" my-pw 查看原文密码 \n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(". secret创建服务时的使用 \n  - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.1")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" create --name db --secret my-pw -e "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ROOT_PASSWORD_FILE")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/run/secrets/my-pw mysql \n  - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /run/secrets/my-pw   em :admin123\n    + mysql -u root -p 登录使用 admin123 测试密码生效\n")])])]),n("ol",{attrs:{start:"5"}},[n("li",[s._v("参考docker-compose.yml")])]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("version: "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3'")]),s._v("\n\nservices:\n\n  web:\n    image: wordpress\n    ports:\n      - "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":80\n    secrets:\n        - my-pw\n    environment:\n        WORDPRESS_DB_HOST: mysql:3306\n        WORDPRESS_DB_USER: root\n        WORDPRESS_DB_PASSWORD_FILE: /run/secrets/my-pw "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 密钥文件")]),s._v("\n    networks:\n      - my-network\n    depends_on:\n      - mysql\n    deploy:\n      mode: replicated\n      replicas: "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n      update_config:\n        parallelism: "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        delay: 10s\n\n\n  mysql:\n    image: mysql\n    secrets: \n        - my-pw "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定密钥")]),s._v("\n    environment:\n      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/my-pw "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定密钥文件位置")]),s._v("\n      MYSQL_DATABASE: wordpress\n    volumes:\n      - mysql-data:/var/lib/mysql\n    networks:\n      - my-network\n    deploy:\n      mode: global\n      placement:\n            constraints: \n                  - node.role "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" manager\n\nvolumes:\n  mysql-data:\n\nnetworks:\n  my-network:\n    driver: overlay\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  可以这样去创建密钥文件 ，但一般不推荐 ， 有一定风险，违背加密初衷 ，一般单独创建加密文件")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# secrets ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# my-pw")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# file: ./password  ")]),s._v("\n")])])]),n("ol",{attrs:{start:"6"}},[n("li",[s._v("使用swarm集群 stack方式创建 -c为--compose= 缩写 ，执行文件为docker.compose.yml\ndocker stack deploy wordpress -c=docker-compose.yml")])]),s._v(" "),n("h2",{attrs:{id:"service-的更新"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#service-的更新"}},[s._v("#")]),s._v(" service 的更新")]),s._v(" "),n("p",[s._v("普通更新原理：  水平扩展scale多个service ， 进行循环部分更新\nstack swarm集群更新 ：")]),s._v(" "),n("ul",[n("li",[s._v("如果是docerk stack更新的话 就在 deploy中的update_config中去设置相关参数 去执行命令更新 即可")])]),s._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v(" \n 测试命令  ：\n - 循环访问web服务\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" -c "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"while true ; do curl 127.0.0.1:8080&&sleep 1 ;done"')]),s._v("\n - 更新服务 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("版本"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" update --image "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("image name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(":2.0 web \n  遗留问题： 更新过程中 新版本（2.0） 和旧版本（1.0） 访问会同时存在 \n -更新 端口 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("从8080 更新到 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8088")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" update --update --publish-rm "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":50 --publish--add "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8088")]),s._v(":5000 web\n")])])]),n("h2",{attrs:{id:"kubernetes-k8s"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-k8s"}},[s._v("#")]),s._v(" kubernetes k8s")]),s._v(" "),n("ul",[n("li",[s._v("中文文档 https://www.kubernetes.org.cn/installkubectl")])]),s._v(" "),n("ol",[n("li",[s._v("安装minikube")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("minikube ( https://github.com/kubernetes/minikube )")]),s._v(" "),n("ul",[n("li",[s._v("安装使用流程 ： https://minikube.sigs.k8s.io/docs/start/")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("安装minikube curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-arm64 （不同设备安装包不同，可在安装流程中寻找）")])]),s._v(" "),n("li",[n("p",[s._v("sudo install minikube-linux-arm64 /usr/local/bin/minikube")])]),s._v(" "),n("li",[n("p",[s._v("使用curl下载kubectl客户端工具")]),s._v(" "),n("p",[s._v('1）使用以下命令下载最新版本：\ncurl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"')]),s._v(" "),n("p",[s._v('2）验证二进制文件（可选）\n下载 kubectl 校验和文件：\ncurl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"')]),s._v(" "),n("p",[s._v('3）根据校验和文件验证 kubectl 二进制文件：\necho "$(<kubectl.sha256) kubectl" | sha256sum --check\n如果有效，则输出为：\nkubectl: OK')]),s._v(" "),n("p",[s._v("4）安装 kubectl\ninstall -o root -g root -m 0755 kubectl /usr/bin/kubectl")]),s._v(" "),n("p",[s._v("5）测试以确保您安装的版本是最新的：\nkubectl version --client")]),s._v(" "),n("p",[s._v("6）将rancher集群中kubeconfig的内容复制到服务器config中\nmkdir -p $HOME/.kube\nvi $HOME/.kube/config    #粘贴复制的内容")]),s._v(" "),n("p",[s._v("7）测试kubectl\nkubectl get node")])])])])]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("运行 minikube start\n可能出现的错误\n"),n("ul",[n("li",[s._v("bash: /usr/local/bin/minikube: cannot execute binary file\n第一步的安装 没有选中对版本")]),s._v(" "),n("li",[s._v('iting due to DRV_AS_ROOT: The "docker" driver should not be used with root privileges.\nExiting due to DRV_DOCKER_NOT_RUNNING: Found docker, but the docker service')])]),s._v(" "),n("ul",[n("li",[s._v("start报错 解决办法 :\nminikube start --force --driver=docker")])])])]),s._v(" "),n("h2",{attrs:{id:"docker怎么升级到最新版本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker怎么升级到最新版本"}},[s._v("#")]),s._v(" Docker怎么升级到最新版本")]),s._v(" "),n("h2",{attrs:{id:"finally"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#finally"}},[s._v("#")]),s._v(" finally :")]),s._v(" "),n("ol",[n("li",[s._v("github 上有很多官方提供的的 Dockerfile供参考实践\nfor example\nsearch ："),n("br"),s._v("\ndockerl-library/redis"),n("br"),s._v("\ndocker-library/mysql")]),s._v(" "),n("li",[s._v("dockerFile 官网文档 ：https://docs.docker.com/engine/reference/builder/")])]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);