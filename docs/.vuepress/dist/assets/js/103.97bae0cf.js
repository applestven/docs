(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{615:function(t,a,e){"use strict";e.r(a);var r=e(38),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"常见错误"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见错误"}},[t._v("#")]),t._v(" 常见错误")]),t._v(" "),e("h2",{attrs:{id:"_1-git-add-报错"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-add-报错"}},[t._v("#")]),t._v(" 1. git add 报错")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("warning")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LF")]),t._v(" will be replaced by "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CRLF")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" docs"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vuepress"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nav"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nThe file will have its original line endings "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" your working directory\n参考： https"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("blog"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("csdn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("net"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("huihuikuaipao_"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("article"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("details"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100183521")]),t._v("\n情况一：\nGit 可以在你提交时自动地把回车（"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CR")]),t._v("）和换行（"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LF")]),t._v("）转换成换行（"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LF")]),t._v("），而在检出代码时把换行（"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LF")]),t._v("）转换成回车（"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CR")]),t._v("）和换行（"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LF")]),t._v("）。 你可以用git config "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global core"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("autocrlf "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" 来打开此项功能。 如果是在 Windows 系统上，把它设置成 "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("，这样在检出代码时，换行会被转换成回车和换行：\n")])])]),e("h2",{attrs:{id:"_2-git-pull-报错"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-git-pull-报错"}},[t._v("#")]),t._v(" 2. git pull 报错 ：")]),t._v(" "),e("p",[t._v("There is no tracking information for the current branch.\nPlease specify which branch you want to merge with（当前分支没有跟踪信息请指定要合并的分支）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git branch --set-upstream-to origin/master master\n")])])]),e("p",[t._v("继续报错 ：")]),t._v(" "),e("p",[t._v('If you are planning on basing your work on an upstream\nhint: branch that already exists at the remote, you may need to\nhint: run "git fetch" to retrieve it.')]),t._v(" "),e("h2",{attrs:{id:"_3-提交冲突的情况下-updates-were-rejected-because-the-tip-of-your-current-branch-is-behind"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-提交冲突的情况下-updates-were-rejected-because-the-tip-of-your-current-branch-is-behind"}},[t._v("#")]),t._v(" 3.提交冲突的情况下： Updates were rejected because the tip of your current branch is behind")]),t._v(" "),e("p",[t._v("先更新本地版本  git pull  origin  xxx"),e("br"),t._v("\n再进行提交   git  push origin xxx")]),t._v(" "),e("h2",{attrs:{id:"_4-warning-lf-will-be-replaced-by-crlf-in"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-warning-lf-will-be-replaced-by-crlf-in"}},[t._v("#")]),t._v(" 4.warning: LF will be replaced by CRLF in ******")]),t._v(" "),e("p",[t._v('LF和CRLF其实都是换行符，但是不同的是，LF是linux和Unix系统的换行符，CRLF是window 系统的换行符。这就给跨平台的协作的项目带来了问题，保存文件到底是使用哪个标准呢？ git为了解决这个问题，提供了一个”换行符自动转换“的功能，并且这个功能是默认处于”自动模式“即开启状态的。\n这个换行符自动转换会把自动把你代码里 与你当前操作系统不相同的换行的方式 转换成当前系统的换行方式（即LF和CRLF 之间的转换），这样一来，当你提交代码的时候，即使你没有修改过某个文件，也被git认为你修改过了，从而提示"LF will be replaced by CRLF in *****"\n解决\n最简单的一种办法就是把自动转换功能关掉即可。')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("输入命令 ：git config core.autocrlf false (仅对当前git仓库有效）\ngit config --global core.autocrlf false (全局有效，不设置推荐全局）\n")])])]),e("h2",{attrs:{id:"_5-0提交时转换为lf-检出时转换为crlf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-0提交时转换为lf-检出时转换为crlf"}},[t._v("#")]),t._v(" 5.0提交时转换为LF，检出时转换为CRLF")]),t._v(" "),e("p",[t._v("$ git config --global core.autocrlf true")]),t._v(" "),e("h2",{attrs:{id:"_6-error-the-following-untracked-working-tree-files-would-be-overwritten-by-merge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-error-the-following-untracked-working-tree-files-would-be-overwritten-by-merge"}},[t._v("#")]),t._v(" 6.error: The following untracked working tree files would be overwritten by merge:")]),t._v(" "),e("p",[t._v("git clean -d -fx 放弃本地 慎用！！")])])}),[],!1,null,null,null);a.default=s.exports}}]);